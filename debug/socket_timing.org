#+title: Socket timing

#+begin_src R :exports none :session
library(dplyr)
library(ggplot2)
library(glue)
theme_set(cowplot::theme_cowplot())
add_time_cols <- function(d) {
    # use column "time" to set 
    # diff, dur, and onset
    d$diff  <- c(0, diff(d$time))
    d$dur   <- c(diff(d$time), NA)
    d$onset <- d$time - d$time[1]
    return(d)
}
sep_msg <- function(d)
    tidyr::separate(d, msg, c('trial', 'event', 'rew', 'side'), remove=F) %>%
    mutate(event=factor(ifelse(trial=='iti', 'iti', event), 
                        levels=c("ring","cue","dot","iti")),
           trial=as.numeric(trial))

read_psyclog <- function(psyclog) {
    # e.g. log/sub-000_ses-01_task-DR_run-3-1625165763.log
    l <- read.table(
        text=system(glue("sed 's/ /\t/' {psyclog}"), inter=T),
        col.names=c("time", "msg"), sep="\t") %>%
    sep_msg() %>%
    add_time_cols() %>%
    filter(!is.na(event))
}

viewpoint_msgs <- function(vplog){
    # lines that start with 12 are messages from task to eyetracker
    d <- read.table(text=system(glue(" grep ^12 {vplog}"), intern=T),
                    col.names=c("et","time","msg"), sep="\t") %>%
        sep_msg() %>%
        add_time_cols() %>%
        select(-et)
}

read_pysocketlog <- function(logfile) {
    # only care about timing and "InsertString" lines 
    # and then only the text within the insertstring command
    cmd <- glue("perl -F'\\t' -slane \\
                'next unless $F[1]=~/InsertString \"?([^\";]+)/; \
               print \"$F[0]\t$1\"' {logfile}")
    d <- read.table(text=system(cmd, intern=T),
                    col.names=c("time","msg"), sep="\t") %>%
         sep_msg() %>%
         add_time_cols()
}

vis_timing <- function(d, cmpstr) {
   eventdur_point <-
    ggplot(d %>% filter(event %in% c('ring','cue','dot'))) +
       aes(y=dur,x=trial, color=from) +
       geom_point() +
       facet_wrap(~event) +
       ggtitle(glue("{cmpstr} flip time"))

   diff_hist <-
       ggplot(d %>% filter(diff < 4, diff > 0.1)) +
       aes(x=diff, fill=from) +
       geom_histogram() + #position='dodge')
       ggtitle('hist of event onset diff. expect 1.5 for all')
  
    cowplot::plot_grid(nrow=2, eventdur_point, diff_hist)
}

#+end_src

#+RESULTS:

* Timing issue
  ViewPoint eye tracking files have event trigger marks up to .75 seconds from where they are expected.


  Is the python task code or socket module causing timing problems? It doesn't look like it.
  
  Local and wifi timing experiments were run on linux computers. But timing for windows sockets are similar. All are reasonable when compared to the large timing error between event and reported timing of event trigger in the viewpoint log.
  
  The issue might just be that there was no eye tracked so viewpoint's log did not sample frequently enough. see
  [[*No calibration, no eye: uneven sample rate]]

* Localhost socket timing
  
** record timing
   setup a local socket server to receive and timestamp messages from task
   #+begin_src shell :eval never
   ../tests/fake_socket_server.py logs_socket/pysockserver_timings.tsv &
   ET_HOST=localhost ../lncdtask/dollarreward.py 
   #+end_src

** plot differences

   The task write fliptime to a file and then sends the event info over the socket. Timing should be close. 

   When the socket is on the same computer, the timing is consistent between the file and socket.
   #+begin_src R :session :file ./logs_socket/eventpoint_diffhist.png :results file graphics :cache yes :exports results
   socklogfile <- "./logs_socket/pysockserver_timings.tsv"
   psycfile <- "./logs_socket/sub-000_ses-01_task-DR_run-1-1625753336.log"
   pysock <- read_pysocketlog(socklogfile) %>% mutate(from="socket", i=1:n())
   psylog <- read_psyclog(psycfile) %>% mutate(from="psyc", i=1:n())
  
   flip_and_sock <- rbind(pysock, psylog)
   vis_timing(flip_and_sock, "local socket vs psychopy")

   #overlap nearly exactly
   #ggplot(flip_and_sock) + aes(x=i, y=onset, shape=event, color=from)+ geom_point() 

   #+end_src

   #+RESULTS[fc3ed0860bbd5b34bf204d4a02b7a0b3d25199fa]:
   [[file:./logs_socket/eventpoint_diffhist.png]]

* python socket with wifi
  
  Using python socket server to record timing of sent events over wifi. 

  #+begin_src R :session :results file graphics :file ./logs_socket_wifi/eventpoint_diffhist.png :cache yes :exports results
   #+begin_src R :session :file ./logs_socket/eventpoint_diffhist.png :results file graphics
   socklogfile_wifi <- "./logs_socket_wifi/pysocket_wifi.tsv"
   psycfile_wifi <- "./logs_socket_wifi/sub-wifi_ses-01_task-DR_run-1-1625761526.log"
   wifi_long <- rbind(
       read_pysocketlog(socklogfile_wifi) %>% mutate(from="wifisocket", i=1:n()),
       read_psyclog(psycfile_wifi) %>% mutate(from="psyc", i=1:n()))
  
   vis_timing(wifi_long, "wifi pysocket vs psychopy")

  #+end_src

  #+RESULTS:
  [[file:./logs_socket_wifi/eventpoint_diffhist.png]]
  
  the upper and lower timing errors are less than 50ms
  #+begin_src R :session :exports results
   wifi_diff_range <-
    wifi_long %>%
    filter(from=="wifisocket", diff>.1, diff<3) %>%
    select(diff) %>%
    range
   
  round(wifi_diff_range - 1.5, 3)
  #+end_src

  #+RESULTS:
  | -0.043 |
  |  0.043 |

  
* Windows task and wifi
  
  Development is on linux, but arrington interfaces with task on a windows laptop. Does OS matter? Doesn't look like it

  #+begin_src R :session :results file graphics :file ./logs_from_windows/eventpoint_diffhist.png :cache yes :exports results
   #+begin_src R :session :file ./logs_socket/eventpoint_diffhist.png :results file graphics
   socklogfile_win <- "./logs_from_windows/pysocket_windows.tsv"
   psycfile_win <- "./logs_from_windows/sub-000_ses-01_task-DR_run-1-1626203839.log"
   win_long <- rbind(
       read_pysocketlog(socklogfile_win) %>% mutate(from="windows", i=1:n()),
       read_psyclog(psycfile_win) %>% mutate(from="psyc", i=1:n()))
  
   vis_timing(win_long, "windows wifi pysocket vs psychopy")

  #+end_src

  #+RESULTS[c71c020b97b8d9b7fc7e126993e3c12573fedbf2]:
  [[file:./logs_from_windows/eventpoint_diffhist.png]]

  #+begin_src R :session :exports results
   win_diff_range <-
    win_long %>%
    filter(from=="windows", diff>.1, diff<3) %>%
    select(diff) %>%
    range
   
  round(win_diff_range - 1.5, 3)
  #+end_src

  #+RESULTS:
  | -0.018 |
  |  0.019 |

  
* Arrington viewpoint
  
  #+begin_src R :session :results file graphics :file ./logs_arrington/eventpoint_diffhist.png :cache yes :exports results

   viewpoint_file <- "./logs_arrington/sub-000_ses-01_task-DR_run-3"
   psycfile_vp <- "./logs_arrington/log/sub-000_ses-01_task-DR_run-3-1625165763.log"

   arrington_long <- rbind(
       viewpoint_msgs(viewpoint_file) %>% mutate(from="viewpoint", i=1:n()),
       read_psyclog(psycfile_vp) %>% mutate(from="psyc", i=1:n()))

   vis_timing(arrington_long, "viewpoint vs psychopy")
  #+end_src

  #+RESULTS[2b8d6a3f5efad5f61e2bd668be4510d947789535]:
  [[file:./logs_arrington/eventpoint_diffhist.png]]
  

  Viewpoint recorded messages range > 100ms from expected
  #+begin_src R :session :exports results :cache yes
   vp_diff_range <-
    arrington_long %>%
    filter(from=="viewpoint", diff>.1, diff<3, !is.na(diff)) %>%
    select(diff) %>%
    range

  round(vp_diff_range - 1.5, 3)
  #+end_src

  #+RESULTS[0d9c41f506f0bcdb9fa3af4e35bba5c1c132d8e1]:
  | -0.25 |
  |  0.75 |

  
** No calibration, no eye: uneven sample rate
   The viewpoint file does not have many samples between events. The data was collected without an eye to record nor any calibration.
   #+begin_src R :session :cache yes :file ./logs_arrington/sample_dist.png :results file graphics 

   # viewpoint_file <- "./logs_arrington/sub-000_ses-01_task-DR_run-3"
   vp_sample_times <- read.table(text=system(glue("grep ^10 {viewpoint_file}|cut -f2"), intern=T))
   task_end <- 300
   hist(diff(vp_sample_times[vp_sample_times < task_end])
   #+end_src

   #+RESULTS[e827eb734d5db4cc2b5e124160ac6453cbdbeea2]:
   [[file:./logs_arrington/sample_dist.png]]
